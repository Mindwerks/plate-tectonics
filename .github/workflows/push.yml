name: Workflow
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: "Build for Python ${{ matrix.python }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python:
#          - 2.7.18
          - 3.6
          - 3.8
          - 3.10
          - 3.11
          - 3.12
        exclude:
          - os: windows-latest
            python: 2.7.18  # No MSVC support for old 2.7

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update; sudo apt install build-essential libssl-dev zlib1g-dev \
          libbz2-dev libreadline-dev libsqlite3-dev curl git \
          libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64"
      - name: Configure CMake (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo
          make -j2

      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cmake . -G "Visual Studio 17 2022" -A x64
          cmake --build . --config RelWithDebInfo

      - name: Run tests (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd test
          make -j2
          ./PlateTectonicsTests

      - name: Run tests (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd test
          ctest -C Release --output-on-failure

#      - name: Install python (Linux)
#        if: matrix.os == 'ubuntu-latest'
#        uses: gabrielfalcao/pyenv-action@v18
#        with:
#          default: "${{ matrix.python }}"
#          command: pip install -U pip wheel setuptools twine # upgrade pip after installing python

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Build Python bindings
        run: |
          pip install -U pip wheel setuptools twine
          cd pybindings
          python setup.py clean build sdist bdist_wheel

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-build-${{ matrix.os }}-${{ matrix.python }}
          path: pybindings/dist/

  collect-artifacts:
    name: "Collect All Artefacts"
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts/

      - name: Package all artifacts
        run: |
          mkdir -p final-builds
          find all-artifacts/ -type f -exec mv {} final-builds/ \;
          ls -lah final-builds/

      - name: Upload final artifact package
        uses: actions/upload-artifact@v4
        with:
          name: final-python-builds
          path: final-builds/
